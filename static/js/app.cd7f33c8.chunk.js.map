{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","isModify","setIsModify","modifyKey","setModifyKey","text","setText","modifyText","setModifyText","toDos","setToDos","useEffect","loadToDos","loadWorkTravel","saveWorkTravel","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","isWork","getItem","s","parse","loadData","onChangeModifyText","payload","modifyToDo","key","newToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","Date","now","isDone","onChangeText","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","toDo","toDoText","toDoTextDone","toDoTextBox","toDoIcon","toggleModifly","Fontisto","name","size","checkToDo","Platform","OS","confirm","Alert","alert","deleteToDo","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","marginHorizontal","textDecorationLine"],"mappings":"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","file":"static/js/app.cd7f33c8.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableWithoutFeedback,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./colors\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nconst STORAGE_KEY = \"@toDos\";\nconst STORAGE_KEY_WORK_TRAVEL = \"@workTravel\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [isModify, setIsModify] = useState(false);\n  const [modifyKey, setModifyKey] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [modifyText, setModifyText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n\n  useEffect(() => {\n    loadToDos();\n    loadWorkTravel();\n  }, []);\n  useEffect(() => {\n    saveWorkTravel();\n  }, [working]);\n\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const saveWorkTravel = async () => {\n    const isWork = working ? \"working\" : \"travel\";\n    await AsyncStorage.setItem(STORAGE_KEY_WORK_TRAVEL, isWork);\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) setToDos(JSON.parse(s));\n  };\n  const loadWorkTravel = async () => {\n    const loadData = await AsyncStorage.getItem(STORAGE_KEY_WORK_TRAVEL);\n    const isWork = loadData === \"working\" ? true : false;\n    setWorking(isWork);\n  };\n  const travel = () => {\n    setWorking(false);\n  };\n  const work = () => {\n    setWorking(true);\n  };\n  const onChangeText = (payload) => setText(payload);\n  const onChangeModifyText = (payload) => setModifyText(payload);\n  const toggleModifly = (key) => {\n    if (isModify) {\n      setIsModify(false);\n      modifyToDo(key);\n    } else {\n      setModifyText(toDos[key].text);\n      setModifyKey(key);\n      setIsModify(true);\n    }\n  };\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working: working, isDone: false },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\", // ios only\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n  const modifyToDo = async (key) => {\n    const newToDos = {\n      ...toDos,\n      [key]: { ...toDos[key], text: modifyText },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setIsModify(false);\n    setModifyKey(\"\");\n  };\n  const checkToDo = async (key) => {\n    const newToDos = {\n      ...toDos,\n      [key]: { ...toDos[key], isDone: !toDos[key].isDone },\n    };\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput\n          onSubmitEditing={addToDo}\n          onChangeText={onChangeText}\n          returnKeyType=\"done\"\n          value={text}\n          placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n          style={styles.input}\n        ></TextInput>\n      </View>\n      <ScrollView>\n        {toDos &&\n          Object.keys(toDos).map((key) =>\n            toDos[key].working === working ? (\n              <View style={styles.toDo} key={key}>\n                {toDos[key].isDone ? (\n                  <Text style={{ ...styles.toDoText, ...styles.toDoTextDone }}>\n                    {toDos[key].text}\n                  </Text>\n                ) : isModify && key === modifyKey ? (\n                  <TextInput\n                    onSubmitEditing={modifyToDo}\n                    onChangeText={onChangeModifyText}\n                    returnKeyType=\"modify\"\n                    value={modifyText}\n                    placeholder={\n                      working ? \"Add a To Do\" : \"Where do you want to go?\"\n                    }\n                    style={styles.input}\n                  ></TextInput>\n                ) : (\n                  <Text style={styles.toDoText}>{toDos[key].text}</Text>\n                )}\n\n                <View style={styles.toDoTextBox}>\n                  {!toDos[key].isDone && (\n                    <TouchableOpacity\n                      style={styles.toDoIcon}\n                      onPress={() => toggleModifly(key)}\n                    >\n                      <Fontisto name=\"redo\" size={18} color=\"white\" />\n                    </TouchableOpacity>\n                  )}\n                  <TouchableOpacity\n                    style={styles.toDoIcon}\n                    onPress={() => checkToDo(key)}\n                  >\n                    {toDos[key].isDone ? (\n                      <Fontisto\n                        name=\"checkbox-active\"\n                        size={18}\n                        color=\"white\"\n                      />\n                    ) : (\n                      <Fontisto\n                        name=\"checkbox-passive\"\n                        size={18}\n                        color=\"white\"\n                      />\n                    )}\n                  </TouchableOpacity>\n\n                  <TouchableOpacity\n                    style={styles.toDoIcon}\n                    onPress={() => deleteToDo(key)}\n                  >\n                    <Fontisto name=\"trash\" size={18} color=\"white\" />\n                  </TouchableOpacity>\n                </View>\n              </View>\n            ) : null\n          )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoTextBox: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  toDoIcon: {\n    marginHorizontal: 10,\n  },\n  toDoTextDone: {\n    color: \"darkgrey\",\n    textDecorationLine: \"line-through\",\n  },\n});\n"],"sourceRoot":""}